#+TITLE:       Papers
#+AUTHOR:      homanlab
#+EMAIL:       homanlab.zurich@gmail.com
#+DATE:        2019-09-30 Mon
#+URI:         /blog/%y/%m/%d/papers
#+KEYWORDS:    lab, papers, publications
#+TAGS:        lab, papers, publications
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: How to reach us
#+AVATAR:      https://homanlab.github.io/media/img/zurich_summer2.jpg
#+CITE_EXPORT: basic
#+BIBLIOGRAPHY: /Users/phoman/db/bibtex/master.bib 
* Image                                                              :ignore:
#+ATTR_HTML: :width 400px
[[https://homanlab.github.io/media/img/zurich_summer2.jpg]]

* Output                                                             :ignore:
** Code                                                         :ignore:
#+BEGIN_SRC bash :exports results :results silent
~/db/bin/upbs
#+END_SRC

#+NAME: bibkey-code
#+BEGIN_SRC emacs-lisp :exports results :results silent

(print "hi there")

(defun get-bibkeys (searchstr)
(seq-map
 (lambda (entry)
   (cdr (assoc "=key=" (cdr entry))))
 (seq-filter
   (lambda (entry)
     (string-match-p searchstr (or (car entry) "")))
     ;(string-match-p searchstr (or (cdr (assoc "author" (cdr entry))) "")))
  (sort (bibtex-completion-candidates)
                    (lambda (entry1 entry2)
                      (> (string-to-number (or (cdr (assoc "year" (cdr entry1))) "0"))
                         (string-to-number (or (cdr (assoc "year" (cdr entry2))) "0"))))))))

#+END_SRC

# CALL: bibkey-code()


** Publications with peer-review
*** Code                                                        :ignore:

#+BEGIN_SRC emacs-lisp :exports results :results raw
;(setq entries (sort (bibtex-completion-candidates)
;                    (lambda (entry1 entry2)
;                      (< (string-to-number (or (cdr (assoc "year" (cdr entry1))) "0"))
;                         (string-to-number (or (cdr (assoc "year" (cdr entry2))) "0"))))))

(setq searchstr (rx-to-string '(and "peer reviewed" (*? anything) "homan"))) 
(setq keys (get-bibkeys searchstr))
(setq l1 (mapcar (lambda (c) (concat "1. [cite:@" c)) keys))
(setq l2 (mapcar (lambda (c) (concat c "]." )) l1))

;(require 'seq)
;(setq l3 (seq-sort-by #'length #'> l2))
;(setq l3 (cl-sort l2 'string-lessp :key 'downcase))
;(setq l3 (cl-sort l2 'string-match :key 'downcase))

;(substring "Homan2020" 5 )
;(replace-regexp-in-string "\\..*" "" "Test.m")

;(setq l3 (sort l2 (lambda (a b) (string< (car a) (car b)))))

(mapconcat 'identity l2 "\n")

#+END_SRC

#+RESULTS:
1. cite:Sharkey2024.
1. cite:Rubio2024.
1. cite:Muller2024.
1. cite:Jiang2023a.
1. cite:Wagner2023a.
1. cite:Schijven2023.
1. cite:Georgiadis2023.
1. cite:Corona2022.
1. cite:Palaniyappan2022.
1. cite:Kuzo2022.
1. cite:Homan2022f.
1. cite:Constantinides2022.
1. cite:Brakowski2022.
1. cite:Soelch2021.
1. cite:Neumeier2021.
1. cite:Homan2021.
1. cite:Homan2020a.
1. cite:Defilippis2021.
1. cite:Winkelbeiner2019b.
1. cite:Thies2020.
1. cite:Oliver2020a.
1. cite:Munkholm2020.
1. cite:Kirschner2020b.
1. cite:Grieder2020.
1. cite:Gaillard2020.
1. cite:Ali2020.
1. cite:Winkelbeiner2019.
1. cite:Marzouk2019.
1. cite:Kunzelmann2019.
1. cite:Homan2019k.
1. cite:Homan2019a.
1. cite:Homan2019.
1. cite:Gaillard2019.
1. cite:Winkelbeiner2018a.
1. cite:Winkelbeiner2018.
1. cite:Viviano2018.
1. cite:Hu2018.
1. cite:Cavelti2018b.
1. cite:Cavelti2018a.
1. cite:Cavelti2018.
1. cite:Homan2017d.
1. cite:Homan2017b.
1. cite:Homan2017a.
1. cite:Cavelti2016.
1. cite:Kindler2015.
1. cite:Homan2015b.
1. cite:Homan2015a.
1. cite:Woodward2014.
1. cite:Homan2014g.
1. cite:Homan2014e.
1. cite:Homan2014d.
1. cite:Kindler2013a.
1. cite:Kindler2013.
1. cite:Homan2013c.
1. cite:Homan2013b.
1. cite:Homan2013a.
1. cite:Homan2012b.
1. cite:Homan2012a.
1. cite:Homan2011b.

*** Output                                                      :ignore:
** Publications without peer-review and preprints
*** Code                                                        :ignore:

#+BEGIN_SRC emacs-lisp :exports results :results raw

;(setq searchstr (rx-to-string '(and "not reviewed" (*? anything) "preprint" (*? anything) "homan"))) 
(setq searchstr (rx-to-string '(and "not reviewed" (*? anything)
                                (or "editorial" "preprint" "abstract" "essay") (*? anything) 
                                    "homan"))) 
                                    
(setq keys (get-bibkeys searchstr))
(setq l1 (mapcar (lambda (c) (concat "1. \\bibentry{" c)) keys))
(setq l2 (mapcar (lambda (c) (concat c "}." )) l1))
(mapconcat 'identity l2 "\n")

#+END_SRC

#+RESULTS:
1. \bibentry{DeYoung2022}.
1. \bibentry{Homan2022j}.
1. \bibentry{Winkelbeiner2020}.
1. \bibentry{Neumeier2020a}.
1. \bibentry{Neumeier2020}.
1. \bibentry{Homan2020d}.
1. \bibentry{Munkholm2019a}.
1. \bibentry{Homan2019h}.
1. \bibentry{Winkelbeiner2018b}.
1. \bibentry{Homan2018t}.
1. \bibentry{Homan2018j}.
1. \bibentry{Homan2018c}.
1. \bibentry{Homan2018b}.
1. \bibentry{Homan2016}.
1. \bibentry{Homan2014f}.
1. \bibentry{Homan2009a}.
1. \bibentry{Homan2009}.

*** Output                                                      :ignore:
